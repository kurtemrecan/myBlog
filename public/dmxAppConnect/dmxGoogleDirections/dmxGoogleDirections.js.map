{"version":3,"sources":["components/googleDirections.js","components/googleDistanceMatrix.js"],"names":["dmx","Component","initialData","routeIndex","routes","status","attributes","map","type","String","default","origin","Object","destination","waypoints","Array","travelMode","enum","unitSystem","departureTime","arrivalTime","transitModes","transitPreference","showDirections","Boolean","provideAlternatives","avoidFerries","avoidHighways","avoidTolls","optimizeWaypoints","draggable","dynamicUpdate","methods","route","this","_route","setRouteIndex","index","_directions","_renderer","set","events","directionschanged","Event","routeindexchanged","noresults","success","error","init","_service","google","maps","DirectionsService","DirectionsRenderer","props","addListener","_directionsHandler","bind","_routeIndexHandler","requestAnimationFrame","performUpdate","updatedProps","has","setOptions","destroy","_getMap","node","document","getElementById","dmxComponent","_map","isArray","latitude","longitude","lat","lng","request","_getWaypoints","TravelMode","UnitSystem","provideRouteAlternatives","transitOptions","Date","modes","routingPreference","drivingOptions","_updateRoute","catch","split","waypoint","location","directions","setMap","setDirections","setPanel","$node","dispatchEvent","getDirections","copyrights","summary","fare","currency","value","totalMeters","legs","reduce","d","leg","distance","totalSeconds","duration","waypointsOrder","waypoint_order","arrivalDate","arrival_time","toISOString","departureDate","departure_time","arrival","text","departure","meters","seconds","start","start_address","end","end_address","steps","step","transit","stop","arrival_stop","name","date","time","departure_stop","headsign","numStops","num_stops","line","instructions","maneuver","travel_mode","setTimeout","getRouteIndex","results","origins","destinations","units","getDistance","_getDistance","render","DistanceMatrixService","getDistanceMatrix","_result","response","originAddresses","destinationAddresses","i","length","elements","rows","j","element","push"],"mappings":"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","file":"dmxGoogleDirections.js","sourcesContent":["dmx.Component('google-directions', {\r\n\r\n  initialData: {\r\n    routeIndex: 0,\r\n    routes: [],\r\n    status: '',\r\n  },\r\n\r\n  attributes: {\r\n    map: { // required\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    origin: { // required\r\n      type: [Object, String],\r\n      default: null,\r\n    },\r\n\r\n    destination: { // required\r\n      type: [Object, String],\r\n      default: null,\r\n    },\r\n\r\n    waypoints: {\r\n      type: [Array, String], // array or | separated string\r\n      default: null,\r\n    },\r\n\r\n    travelMode: {\r\n      type: String,\r\n      default: 'DRIVING',\r\n      enum: ['DRIVING', 'WALKING', 'BICYCLING', 'TRANSIT'],\r\n    },\r\n\r\n    unitSystem: {\r\n      type: String,\r\n      default: 'METRIC',\r\n      enum: ['METRIC', 'IMPERIAL'],\r\n    },\r\n\r\n    departureTime: {\r\n      type: String, // datetime string\r\n      default: null,\r\n    },\r\n\r\n    arrivalTime: {\r\n      type: String, // datetime string\r\n      default: null,\r\n    },\r\n\r\n    transitModes: {\r\n      type: Array,\r\n      default: null, // BUS, RAIL, SUBWAY, TRAIN, TRAM\r\n    },\r\n\r\n    transitPreference: {\r\n      type: String,\r\n      default: null,\r\n      enum: ['FEWER_TRANSFERS', 'LESS_WALKING'],\r\n    },\r\n\r\n    showDirections: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    provideAlternatives: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    avoidFerries: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    avoidHighways: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    avoidTolls: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    optimizeWaypoints: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    draggable: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    dynamicUpdate: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    route () {\r\n      this._route();\r\n    },\r\n\r\n    setRouteIndex (index) {\r\n      if (this._directions) {\r\n        this._renderer.setRouteIndex(index);\r\n        this.set('routeIndex', index);\r\n      }\r\n    },\r\n  },\r\n\r\n  events: {\r\n    directionschanged: Event,\r\n    routeindexchanged: Event,\r\n    noresults: Event,\r\n    success: Event,\r\n    error: Event,\r\n  },\r\n\r\n  init () {\r\n    this._service = new google.maps.DirectionsService();\r\n    this._renderer = new google.maps.DirectionsRenderer({\r\n      draggable: this.props.draggable,\r\n    });\r\n\r\n    this._renderer.addListener('directions_changed', this._directionsHandler.bind(this));\r\n    this._renderer.addListener('routeindex_changed', this._routeIndexHandler.bind(this));\r\n\r\n    requestAnimationFrame(() => {\r\n      this._route();\r\n    });\r\n  },\r\n\r\n  performUpdate (updatedProps) {\r\n    if (updatedProps.has('draggable')) {\r\n      this._renderer.setOptions({ draggable: this.props.draggable });\r\n    }\r\n\r\n    if (this.props.dynamicUpdate) {\r\n      if (updatedProps.has('origin') || updatedProps.has('destination') || updatedProps.has('waypoints')) {\r\n        this._route();\r\n      }\r\n    }\r\n  },\r\n\r\n  destroy () {\r\n    // cleanup\r\n  },\r\n\r\n  _getMap () {\r\n    if (this.props.map) {\r\n      const node = document.getElementById(this.props.map);\r\n      return node && node.dmxComponent && node.dmxComponent._map;\r\n    }\r\n  },\r\n\r\n  _route () {\r\n    if (!this.props.origin || !this.props.destination) return;\r\n\r\n    const origin = this.props.origin;\r\n    const destination = this.props.destination;\r\n\r\n    if (Array.isArray(origin)) {\r\n      origin = origin[0];\r\n    }\r\n\r\n    if (Array.isArray(destination)) {\r\n      destination = destination[0];\r\n    }\r\n\r\n    if (origin.latitude && origin.longitude) {\r\n      origin = { lat: +origin.latitude, lng: +origin.longitude };\r\n    } else if (origin.lat && origin.lng) {\r\n      origin = { lat: +origin.lat, lng: +origin.lng };\r\n    }\r\n\r\n    if (destination.latitude && destination.longitude) {\r\n      destination = { lat: +destination.latitude, lng: +destination.longitude };\r\n    } else if (destination.lat && destination.lng) {\r\n      destination = { lat: +destination.lat, lng: +destination.lng };\r\n    }\r\n\r\n    const request = {\r\n      origin: origin,\r\n      destination: destination,\r\n      waypoints: this._getWaypoints(),\r\n      optimizeWaypoints: this.props.optimizeWaypoints,\r\n      travelMode: google.maps.TravelMode[this.props.travelMode],\r\n      unitSystem: google.maps.UnitSystem[this.props.unitSystem],\r\n      provideRouteAlternatives: this.props.provideAlternatives,\r\n      avoidFerries: this.props.avoidFerries,\r\n      avoidHighways: this.props.avoidHighways,\r\n      avoidTolls: this.props.avoidTolls,\r\n    };\r\n\r\n    if (this.props.travelMode == 'TRANSIT') {\r\n      request.transitOptions = {};\r\n\r\n      if (this.props.arrivalTime) {\r\n        request.transitOptions.arrivalTime = new Date(this.props.arrivalTime);\r\n      }\r\n\r\n      if (this.props.departureTime) {\r\n        request.transitOptions.departureTime = new Date(this.props.departureTime);\r\n      }\r\n\r\n      if (Array.isArray(this.props.transitModes)) {\r\n        request.transitOptions.modes = this.props.transitModes;\r\n      }\r\n\r\n      if (this.props.transitPreference) {\r\n        request.transitOptions.routingPreference = this.props.transitPreference;\r\n      }\r\n    }\r\n\r\n    if (this.props.travelMode == 'DRIVING' && this.props.departureTime) {\r\n      request.drivingOptions = {\r\n        departureTime: new Date(this.props.departureTime),\r\n      };\r\n    }\r\n\r\n    this._service.route(request, this._updateRoute.bind(this)).catch(error => {\r\n      // do nothing, just preventing uncought error\r\n    });\r\n  },\r\n\r\n  _getWaypoints () {\r\n    if (typeof this.props.waypoints == 'string') {\r\n      this.props.waypoints = this.props.waypoints.split(/\\s*\\|\\s*/);\r\n    }\r\n\r\n    if (Array.isArray(this.props.waypoints)) {\r\n      return this.props.waypoints.map(waypoint => {\r\n        if (waypoint.lat) waypoint.lat = +waypoint.lat;\r\n        if (waypoint.lng) waypoint.lng = +waypoint.lng;\r\n        return { location: waypoint };\r\n      });\r\n    }\r\n\r\n    return null;\r\n  },\r\n\r\n  _updateRoute (directions, status) {\r\n    this.set('routeIndex', 0);\r\n    this.set('status', status);\r\n\r\n    if (status == 'OK') {\r\n      this._directions = directions;\r\n      \r\n      const map = this._getMap();\r\n\r\n      this._renderer.setMap(map || null);\r\n      this._renderer.setDirections(directions);\r\n\r\n      if (this.props.showDirections) {\r\n        this._renderer.setPanel(this.$node);\r\n      }\r\n\r\n      requestAnimationFrame(() => {\r\n        this.dispatchEvent('success');\r\n      });\r\n    } else {\r\n      //console.warn(directions, status);\r\n      this._directions = null;\r\n\r\n      this.set('routes', []);\r\n\r\n      if (status == 'ZERO_RESULTS') {\r\n        requestAnimationFrame(() => {\r\n          this.dispatchEvent('noresults');\r\n        });\r\n      } else {\r\n        requestAnimationFrame(() => {\r\n          this.dispatchEvent('error');\r\n        });\r\n      }\r\n    }\r\n  },\r\n\r\n  _directionsHandler () {\r\n    const directions = this._renderer.getDirections();\r\n\r\n    this.set('routes', directions.routes.map((route, index) => {\r\n      return {\r\n        index: index,\r\n        copyrights: route.copyrights,\r\n        summary: route.summary,\r\n        fare: route.fare ? {\r\n          currency: route.fare.currency,\r\n          value: route.fare.value,\r\n        } : null,\r\n        totalMeters: route.legs.reduce((d, leg) => {\r\n          d += (leg.distance && leg.distance.value || 0);\r\n          return d;\r\n        }, 0),\r\n        totalSeconds: route.legs.reduce((d, leg) => {\r\n          d += (leg.duration && leg.duration.value || 0);\r\n          return d;\r\n        }, 0),\r\n        waypointsOrder: route.waypoint_order,\r\n        legs: route.legs.map(leg => {\r\n          return {\r\n            arrivalDate: leg.arrival_time && leg.arrival_time.value.toISOString(),\r\n            departureDate: leg.departure_time && leg.departure_time.value.toISOString(),\r\n            arrival: leg.arrival_time && leg.arrival_time.text,\r\n            departure: leg.departure_time && leg.departure_time.text,\r\n            distance: leg.distance.text,\r\n            duration: leg.duration.text,\r\n            meters: leg.distance.value,\r\n            seconds: leg.duration.value,\r\n            start: leg.start_address,\r\n            end: leg.end_address,\r\n            steps: leg.steps.map(step => {\r\n              const transit = {};\r\n\r\n              if (step.transit) {\r\n                transit.arrival = {\r\n                  stop: step.transit.arrival_stop.name,\r\n                  date: step.transit.arrival_time.value.toISOString(),\r\n                  time: step.transit.arrival_time.text,\r\n                };\r\n                transit.departure = {\r\n                  stop: step.transit.departure_stop.name,\r\n                  date: step.transit.departure_time.value.toISOString(),\r\n                  time: step.transit.departure_time.text,\r\n                };\r\n                transit.headsign = step.transit.headsign;\r\n                transit.numStops = step.transit.num_stops;\r\n                transit.line = step.transit.line;\r\n              }\r\n\r\n              return {\r\n                distance: step.distance.text,\r\n                duration: step.duration.text,\r\n                instructions: step.instructions,\r\n                maneuver: step.maneuver,\r\n                travelMode: step.travel_mode,\r\n                transit: transit,\r\n              };\r\n            })\r\n          };\r\n        })\r\n      }\r\n    }));\r\n\r\n    setTimeout(() => {\r\n      this.dispatchEvent('directionschanged');\r\n    }, 100);\r\n  },\r\n\r\n  _routeIndexHandler () {\r\n    this.set('routeIndex', this._renderer.getRouteIndex());\r\n    requestAnimationFrame(() => {\r\n      this.dispatchEvent('routeindexchanged');\r\n    });\r\n  },\r\n\r\n});\r\n","dmx.Component('google-distance-matrix', {\r\n  \r\n  initialData: {\r\n    status: '',\r\n    results: [],\r\n  },\r\n\r\n  attributes: {\r\n    origins: {\r\n      type: [Array, String],\r\n      default: null,\r\n    },\r\n\r\n    destinations: {\r\n      type: [Array, String],\r\n      default: null,\r\n    },\r\n\r\n    travelMode: {\r\n      type: String,\r\n      default: 'DRIVING',\r\n      enum: ['DRIVING', 'TRANSIT', 'WALKING', 'BICYCLING'],\r\n    },\r\n\r\n    units: {\r\n      type: String,\r\n      default: 'METRIC',\r\n      enum: ['METRIC', 'IMPERIAL'],\r\n    },\r\n\r\n    avoidHighways: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    avoidTolls: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    getDistance (origin, destination) {\r\n      this._getDistance(origin, destination);\r\n    },\r\n  },\r\n\r\n  render (node) {\r\n    this._service = new google.maps.DistanceMatrixService();\r\n    \r\n    if (this.props.origins && this.props.destinations) {\r\n      this._getDistance(this.props.origins, this.props.destinations);\r\n    }\r\n  },\r\n\r\n  performUpdate (updatedProps) {\r\n    if (updatedProps.has('origins') || updatedProps.has('destinations')) {\r\n      if (this.props.origins && this.props.destinations) {\r\n        this._getDistance(this.props.origins, this.props.destinations);\r\n      }\r\n    }\r\n  },\r\n\r\n  _getDistance (origin, destination) {\r\n    if (typeof origin === 'string') {\r\n      origin = origin.split(/\\s*\\|\\/*/);\r\n    }\r\n\r\n    if (typeof destination === 'string') {\r\n      destination = destination.split(/\\s*\\|\\/*/);\r\n    }\r\n\r\n    this._service.getDistanceMatrix({\r\n      origins: origin,\r\n      destinations: destination,\r\n      travelMode: google.maps.TravelMode[this.props.travelMode],\r\n      unitSystem: google.maps.UnitSystem[this.props.units],\r\n      avoidHighways: this.props.avoidHighways,\r\n      avoidTolls: this.props.avoidTolls,\r\n    }, this._result.bind(this));\r\n  },\r\n\r\n  _result (response, status) {\r\n    this.set('status', status);\r\n\r\n    if (status === 'OK') {\r\n      const results = [];\r\n      const origins = response.originAddresses;\r\n      const destinations = response.destinationAddresses;\r\n\r\n      for (let i = 0; i < origins.length; i++) {\r\n        const elements = response.rows[i].elements;\r\n\r\n        for (let j = 0; j < elements.length; j++) {\r\n          const element = elements[j];\r\n\r\n          results.push({\r\n            origin: origins[i],\r\n            destination: destinations[j],\r\n            distance: element.distance.text,\r\n            duration: element.duration.text,\r\n            meters: element.distance.value,\r\n            seconds: element.duration.value,\r\n          });\r\n        }\r\n      }\r\n\r\n      this.set('results', results);\r\n    }\r\n  },\r\n\r\n});\r\n"]}
/*!
 App Connect Google Directions
 Version: 2.0.0
 (c) 2024 Wappler.io
 @build 2024-04-15 17:48:46
 */
dmx.Component("google-directions",{initialData:{routeIndex:0,routes:[],status:""},attributes:{map:{type:String,default:null},origin:{type:[Object,String],default:null},destination:{type:[Object,String],default:null},waypoints:{type:[Array,String],default:null},travelMode:{type:String,default:"DRIVING",enum:["DRIVING","WALKING","BICYCLING","TRANSIT"]},unitSystem:{type:String,default:"METRIC",enum:["METRIC","IMPERIAL"]},departureTime:{type:String,default:null},arrivalTime:{type:String,default:null},transitModes:{type:Array,default:null},transitPreference:{type:String,default:null,enum:["FEWER_TRANSFERS","LESS_WALKING"]},showDirections:{type:Boolean,default:!1},provideAlternatives:{type:Boolean,default:!1},avoidFerries:{type:Boolean,default:!1},avoidHighways:{type:Boolean,default:!1},avoidTolls:{type:Boolean,default:!1},optimizeWaypoints:{type:Boolean,default:!1},draggable:{type:Boolean,default:!1},dynamicUpdate:{type:Boolean,default:!1}},methods:{route(){this._route()},setRouteIndex(t){this._directions&&(this._renderer.setRouteIndex(t),this.set("routeIndex",t))}},events:{directionschanged:Event,routeindexchanged:Event,noresults:Event,success:Event,error:Event},init(){this._service=new google.maps.DirectionsService,this._renderer=new google.maps.DirectionsRenderer({draggable:this.props.draggable}),this._renderer.addListener("directions_changed",this._directionsHandler.bind(this)),this._renderer.addListener("routeindex_changed",this._routeIndexHandler.bind(this)),requestAnimationFrame((()=>{this._route()}))},performUpdate(t){t.has("draggable")&&this._renderer.setOptions({draggable:this.props.draggable}),this.props.dynamicUpdate&&(t.has("origin")||t.has("destination")||t.has("waypoints"))&&this._route()},destroy(){},_getMap(){if(this.props.map){const t=document.getElementById(this.props.map);return t&&t.dmxComponent&&t.dmxComponent._map}},_route(){if(!this.props.origin||!this.props.destination)return;const t=this.props.origin,e=this.props.destination;Array.isArray(t)&&(t=t[0]),Array.isArray(e)&&(e=e[0]),t.latitude&&t.longitude?t={lat:+t.latitude,lng:+t.longitude}:t.lat&&t.lng&&(t={lat:+t.lat,lng:+t.lng}),e.latitude&&e.longitude?e={lat:+e.latitude,lng:+e.longitude}:e.lat&&e.lng&&(e={lat:+e.lat,lng:+e.lng});const i={origin:t,destination:e,waypoints:this._getWaypoints(),optimizeWaypoints:this.props.optimizeWaypoints,travelMode:google.maps.TravelMode[this.props.travelMode],unitSystem:google.maps.UnitSystem[this.props.unitSystem],provideRouteAlternatives:this.props.provideAlternatives,avoidFerries:this.props.avoidFerries,avoidHighways:this.props.avoidHighways,avoidTolls:this.props.avoidTolls};"TRANSIT"==this.props.travelMode&&(i.transitOptions={},this.props.arrivalTime&&(i.transitOptions.arrivalTime=new Date(this.props.arrivalTime)),this.props.departureTime&&(i.transitOptions.departureTime=new Date(this.props.departureTime)),Array.isArray(this.props.transitModes)&&(i.transitOptions.modes=this.props.transitModes),this.props.transitPreference&&(i.transitOptions.routingPreference=this.props.transitPreference)),"DRIVING"==this.props.travelMode&&this.props.departureTime&&(i.drivingOptions={departureTime:new Date(this.props.departureTime)}),this._service.route(i,this._updateRoute.bind(this)).catch((t=>{}))},_getWaypoints(){return"string"==typeof this.props.waypoints&&(this.props.waypoints=this.props.waypoints.split(/\s*\|\s*/)),Array.isArray(this.props.waypoints)?this.props.waypoints.map((t=>(t.lat&&(t.lat=+t.lat),t.lng&&(t.lng=+t.lng),{location:t}))):null},_updateRoute(t,e){if(this.set("routeIndex",0),this.set("status",e),"OK"==e){this._directions=t;const e=this._getMap();this._renderer.setMap(e||null),this._renderer.setDirections(t),this.props.showDirections&&this._renderer.setPanel(this.$node),requestAnimationFrame((()=>{this.dispatchEvent("success")}))}else this._directions=null,this.set("routes",[]),"ZERO_RESULTS"==e?requestAnimationFrame((()=>{this.dispatchEvent("noresults")})):requestAnimationFrame((()=>{this.dispatchEvent("error")}))},_directionsHandler(){const t=this._renderer.getDirections();this.set("routes",t.routes.map(((t,e)=>({index:e,copyrights:t.copyrights,summary:t.summary,fare:t.fare?{currency:t.fare.currency,value:t.fare.value}:null,totalMeters:t.legs.reduce(((t,e)=>t+=e.distance&&e.distance.value||0),0),totalSeconds:t.legs.reduce(((t,e)=>t+=e.duration&&e.duration.value||0),0),waypointsOrder:t.waypoint_order,legs:t.legs.map((t=>({arrivalDate:t.arrival_time&&t.arrival_time.value.toISOString(),departureDate:t.departure_time&&t.departure_time.value.toISOString(),arrival:t.arrival_time&&t.arrival_time.text,departure:t.departure_time&&t.departure_time.text,distance:t.distance.text,duration:t.duration.text,meters:t.distance.value,seconds:t.duration.value,start:t.start_address,end:t.end_address,steps:t.steps.map((t=>{const e={};return t.transit&&(e.arrival={stop:t.transit.arrival_stop.name,date:t.transit.arrival_time.value.toISOString(),time:t.transit.arrival_time.text},e.departure={stop:t.transit.departure_stop.name,date:t.transit.departure_time.value.toISOString(),time:t.transit.departure_time.text},e.headsign=t.transit.headsign,e.numStops=t.transit.num_stops,e.line=t.transit.line),{distance:t.distance.text,duration:t.duration.text,instructions:t.instructions,maneuver:t.maneuver,travelMode:t.travel_mode,transit:e}}))})))})))),setTimeout((()=>{this.dispatchEvent("directionschanged")}),100)},_routeIndexHandler(){this.set("routeIndex",this._renderer.getRouteIndex()),requestAnimationFrame((()=>{this.dispatchEvent("routeindexchanged")}))}}),dmx.Component("google-distance-matrix",{initialData:{status:"",results:[]},attributes:{origins:{type:[Array,String],default:null},destinations:{type:[Array,String],default:null},travelMode:{type:String,default:"DRIVING",enum:["DRIVING","TRANSIT","WALKING","BICYCLING"]},units:{type:String,default:"METRIC",enum:["METRIC","IMPERIAL"]},avoidHighways:{type:Boolean,default:!1},avoidTolls:{type:Boolean,default:!1}},methods:{getDistance(t,e){this._getDistance(t,e)}},render(t){this._service=new google.maps.DistanceMatrixService,this.props.origins&&this.props.destinations&&this._getDistance(this.props.origins,this.props.destinations)},performUpdate(t){(t.has("origins")||t.has("destinations"))&&this.props.origins&&this.props.destinations&&this._getDistance(this.props.origins,this.props.destinations)},_getDistance(t,e){"string"==typeof t&&(t=t.split(/\s*\|\/*/)),"string"==typeof e&&(e=e.split(/\s*\|\/*/)),this._service.getDistanceMatrix({origins:t,destinations:e,travelMode:google.maps.TravelMode[this.props.travelMode],unitSystem:google.maps.UnitSystem[this.props.units],avoidHighways:this.props.avoidHighways,avoidTolls:this.props.avoidTolls},this._result.bind(this))},_result(t,e){if(this.set("status",e),"OK"===e){const e=[],i=t.originAddresses,s=t.destinationAddresses;for(let r=0;r<i.length;r++){const a=t.rows[r].elements;for(let t=0;t<a.length;t++){const n=a[t];e.push({origin:i[r],destination:s[t],distance:n.distance.text,duration:n.duration.text,meters:n.distance.value,seconds:n.duration.value})}}this.set("results",e)}}});
//# sourceMappingURL=dmxGoogleDirections.js.map
